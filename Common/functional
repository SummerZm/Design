A. 通过函数化编程实现更抽象的泛型
B. 函数式编程：
	a. 本质：输入数据和输出数据的映射
	b. [stateless] 不维护状态
	c. [immutable] 输入数据不可变
	d. 优势：
		-- 没有状态就没有伤害
		-- 并行执行无伤害
		-- copy-paste 重构代码无伤害
		-- 函数执行没有顺序上的问题

	e. 劣势：
		-- 数据复制严重

C. 函数式编程用到的技术
	a. first class function (头等函数)
		1. 函数像变量一样来使用

	b. tail recursion optimization (尾递归优化)
	c. map & reduce (对一个集合做map和reduce操作)
	d. pipeline (管道)
	e. recursing (递归)
	f. currying (柯里化): 将一个函数的多个参数分解成多个函数，然后将函数多层封装起来，每层函数都返回一个函数去接受下一个参数。
		1. 函数式编程里的参数一般是函数。

				def inc(x):
					def incx(y):
						return x+y
					return incx
				 
				inc2 = inc(2)
				inc5 = inc(5)
				 
				print inc2(5) # 输出 7
				print inc5(5) # 输出 10

	g. higher order function (高阶函数): 把函数当参数，把传入的函数做一个封装，然后返回这个封装函数。

D. 什么是状态？过程式编程中状态的危害？例子？
E. 如何理解“程序描述怎么干”和“程序描述干什么的区别”？
F. 如何理解函数式编程"惰性加载"与“确定性”的意义？
G. 循环只能用于线性的数据结构
H. 命令式语言——过程编程语言 ； 声明式语言--函数式编程语言
I. 如何判断一个函数是函数式的？
	1. 函数之间没有共享变量
	2. 通过参数和返回值传递数据
	3. 没有临时变量

J. 函数式编程隐藏了数据结构的操作(遍历等)和数据的控制流程（过滤等）， 让代码里只有业务逻辑
K. 将map/reduce/filter等操作通过pipeline 组织起来.
L. 函数式编程没有循环，因为循环意味着线性遍历


